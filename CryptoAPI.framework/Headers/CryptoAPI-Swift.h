#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 effective-4.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Darwin;
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CryptoAPI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum DeviceVersion : NSInteger;
enum DeviceSize : NSInteger;

SWIFT_CLASS("_TtC9CryptoAPI19ARCompactDeviceInfo")
@interface ARCompactDeviceInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ARCompactDeviceInfo * _Nonnull shared;)
+ (ARCompactDeviceInfo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull deviceNamesByCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)deviceSupportFaceID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deviceSupportTouchID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deviceSupportSecureEnclave SWIFT_WARN_UNUSED_RESULT;
- (enum DeviceVersion)deviceVersion SWIFT_WARN_UNUSED_RESULT;
- (enum DeviceSize)resolutionSize SWIFT_WARN_UNUSED_RESULT;
- (enum DeviceSize)deviceSize SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceSizeName:(enum DeviceSize)deviceSize SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceNameString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceName:(enum DeviceVersion)deviceVersion SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isZoomed SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionEqualTo:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionGreaterThan:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionGreaterThanOrEqualTo:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionLessThan:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionLessThanOrEqualTo:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
@end

@class KeyPairAttributes;
@class SubjectDN;

SWIFT_CLASS("_TtC9CryptoAPI18CertificateManager")
@interface CertificateManager : NSObject
@property (nonatomic) OSStatus signedResult;
+ (CertificateManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)setKeyPairAttributesWithAKeyAtt:(KeyPairAttributes * _Nonnull)aKeyAtt;
/// Create the CSR
- (NSString * _Nonnull)generateCertificateSigningRequestWithSubjectDN:(SubjectDN * _Nonnull)subjectDN publicKeyData:(NSData * _Nonnull)publicKeyData privateKey:(SecKeyRef _Nonnull)privateKey SWIFT_WARN_UNUSED_RESULT;
/// Create certificate from bytes
- (void)generateCertificateFromCertificateBytesWithCertificateData:(NSData * _Nonnull)certificateData;
/// Store certificate in key chain
- (void)storeCertificateWithCertificate:(SecCertificateRef _Nonnull)certificate certAlias:(NSString * _Nonnull)certAlias;
/// Get certificate from key chain
- (SecCertificateRef _Nonnull)getCertificateWithCertAlias:(NSString * _Nonnull)certAlias SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI25CertificateSigningRequest")
@interface CertificateSigningRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9CryptoAPI28CertificateSigningRequestRSA")
@interface CertificateSigningRequestRSA : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     This class exists due to the easy and intuitive way of using public keys generated outside iOS in
///   </li>
///   <li>
///     the Security framework and CommonCrypto tools (yes, I’m being sarcastic here).
///   </li>
///   <li>
///     CryptoCertificateImportManager is in charge of importing a certificate and obtaining a valid key
///   </li>
///   <li>
///     reference to use in any of SecKey operations (SecKeyEncrypt, SecKeyRawVerify…).
///   </li>
///   <li>
///     As far as I know, any other way of importing and using public keys from the outside is not
///   </li>
///   <li>
///     advised: https://devforums.apple.com/message/301532#301532
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9CryptoAPI25CryptoExportImportManager")
@interface CryptoExportImportManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DeviceSize, closed) {
  DeviceSizeUnknownSize = 0,
  DeviceSizeScreen3Dot5inch = 1,
  DeviceSizeScreen4inch = 2,
  DeviceSizeScreen4Dot7inch = 3,
  DeviceSizeScreen5Dot5inch = 4,
  DeviceSizeScreen5Dot8inch = 5,
  DeviceSizeScreen6Dot1inch = 6,
  DeviceSizeScreen6Dot5inch = 7,
};

typedef SWIFT_ENUM(NSInteger, DeviceVersion, closed) {
  DeviceVersionUnknownDevice = -111,
  DeviceVersionSimulator = 1,
  DeviceVersionIPhone4 = 3,
  DeviceVersionIPhone4S = 4,
  DeviceVersionIPhone5 = 5,
  DeviceVersionIPhone5C = 6,
  DeviceVersionIPhone5S = 7,
  DeviceVersionIPhone6 = 8,
  DeviceVersionIPhone6Plus = 9,
  DeviceVersionIPhone6S = 10,
  DeviceVersionIPhone6SPlus = 11,
  DeviceVersionIPhone7 = 12,
  DeviceVersionIPhone7Plus = 13,
  DeviceVersionIPhone8 = 14,
  DeviceVersionIPhone8Plus = 15,
  DeviceVersionIPhoneX = 16,
  DeviceVersionIPhoneSE = 17,
  DeviceVersionIPhoneXS = 18,
  DeviceVersionIPhoneXSMax = 19,
  DeviceVersionIPhoneXSMaxChina = 20,
  DeviceVersionIPhoneXR = 21,
  DeviceVersionIPhone11 = 22,
  DeviceVersionIPhone11Pro = 23,
  DeviceVersionIPhone11ProMax = 24,
  DeviceVersionIPad1 = 100,
  DeviceVersionIPad2 = 102,
  DeviceVersionIPadMini = 103,
  DeviceVersionIPad3 = 104,
  DeviceVersionIPad4 = 105,
  DeviceVersionIPadAir = 106,
  DeviceVersionIPadMini2 = 107,
  DeviceVersionIPadAir2 = 108,
  DeviceVersionIPadMini3 = 109,
  DeviceVersionIPadMini4 = 110,
  DeviceVersionIPadPro12Dot9Inch = 111,
  DeviceVersionIPadPro9Dot7Inch = 112,
  DeviceVersionIPad5 = 113,
  DeviceVersionIPadPro12Dot9Inch2Gen = 114,
  DeviceVersionIPadPro10Dot5Inch = 115,
  DeviceVersionIPadPro11Inch = 116,
  DeviceVersionIPadPro12Dot93rdGenInch = 117,
  DeviceVersionIPadMini5 = 118,
  DeviceVersionIPadAir3 = 119,
  DeviceVersionIPodTouch1Gen = 200,
  DeviceVersionIPodTouch2Gen = 201,
  DeviceVersionIPodTouch3Gen = 202,
  DeviceVersionIPodTouch4Gen = 203,
  DeviceVersionIPodTouch5Gen = 204,
  DeviceVersionIPodTouch6Gen = 205,
  DeviceVersionIPodTouch7Gen = 206,
};


SWIFT_CLASS("_TtC9CryptoAPI17KeyPairAttributes")
@interface KeyPairAttributes : NSObject
@property (nonatomic, copy) NSString * _Nullable keyLabel;
@property (nonatomic, copy) NSString * _Nullable keyType;
@property (nonatomic, copy) NSString * _Nullable keySize;
@property (nonatomic, copy) NSString * _Nullable keyAuthenticationType;
@property (nonatomic, copy) NSString * _Nullable keyStorageType;
@property (nonatomic, copy) NSString * _Nullable keyApplicationTag;
+ (NSString * _Nonnull)RSA SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)Hardware SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)Software SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)SoftwareLocalAuthentication SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)None SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_1024 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_2048 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_3072 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_4096 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC_256 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC_384 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC_521 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)DefualtAuthenticationType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)BiometricOnly SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)PasscodeOnly SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SignedResponse;

SWIFT_CLASS("_TtC9CryptoAPI14KeyPairManager")
@interface KeyPairManager : NSObject
@property (nonatomic) SecKeyRef _Nullable publicKey;
/// It generate the key pair
- (void)generateKeyPair:(KeyPairAttributes * _Nonnull)keypairAttributes completionHandler:(void (^ _Nonnull)(OSStatus))completionHandler;
/// Save Public key in key chain
- (void)savePublicKeyWithKeyTag:(NSString * _Nonnull)keyTag publicKey:(SecKeyRef _Nullable)publicKey;
/// Get Public key from key chain
- (NSData * _Nullable)getPublicKeyWithKeyTag:(NSString * _Nonnull)keyTag SWIFT_WARN_UNUSED_RESULT;
/// Privtae key reference also store in key chain as well as in Secure Enclave so that Private key reference can also be get from keychain
- (SignedResponse * _Nullable)getPrivateKeyWithKeyTag:(NSString * _Nonnull)keyTag prompotMessage:(NSString * _Nonnull)prompotMessage SWIFT_WARN_UNUSED_RESULT;
/// Delete key pair in key chain
- (void)deleteKeyPairWithKeyTag:(NSString * _Nonnull)keyTag keyType:(NSString * _Nonnull)keyType;
- (void)deletePublicKeyWithKeyTag:(NSString * _Nonnull)keyTag keyType:(NSString * _Nonnull)keyType;
- (void)deletePrivateKeyWithKeyTag:(NSString * _Nonnull)keyTag;
- (CFStringRef _Nonnull)getKeyType SWIFT_WARN_UNUSED_RESULT;
- (SecAccessControlCreateFlags)getAuthenticationTypeWithKeypairAttributes:(KeyPairAttributes * _Nonnull)keypairAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI14SignedResponse")
@interface SignedResponse : NSObject
- (NSData * _Nonnull)getSigendData SWIFT_WARN_UNUSED_RESULT;
- (OSStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (SecKeyRef _Nonnull)getSecKeyReference SWIFT_WARN_UNUSED_RESULT;
- (void)setSignedDataWithSData:(NSData * _Nonnull)sData;
- (void)setStatusWithS:(OSStatus)s;
- (void)setSecKeyReferenceWithSec:(SecKeyRef _Nonnull)sec;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SigningRequest;

SWIFT_CLASS("_TtC9CryptoAPI14SigningManager")
@interface SigningManager : NSObject
+ (SigningManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)initialize;
/// It generates the hash of of data
- (NSArray<NSNumber *> * _Nonnull)getHashWithHashAlgo:(NSString * _Nonnull)hashAlgo data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA1 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA1WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA256 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA256WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA384 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA384WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA512 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA512WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It signs data and return signature, data to be sign is always hash of actual data
- (SignedResponse * _Nonnull)signDataWithASigningRequest:(SigningRequest * _Nonnull)aSigningRequest SWIFT_WARN_UNUSED_RESULT;
- (SecPadding)getPaddingWithASigningRequest:(SigningRequest * _Nonnull)aSigningRequest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI14SigningRequest")
@interface SigningRequest : NSObject
- (SecKeyRef _Nonnull)getPrivateKey SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getDigest SWIFT_WARN_UNUSED_RESULT;
- (void)setPrivateKeyWithAPrivateKey:(SecKeyRef _Nonnull)aPrivateKey;
- (void)setDigestWithADigest:(NSArray<NSNumber *> * _Nonnull)aDigest;
- (NSString * _Nonnull)getKeyType SWIFT_WARN_UNUSED_RESULT;
- (void)setKeyTypeWithAKeyType:(NSString * _Nonnull)aKeyType;
- (void)setDigestAlgorithmWithADigestAlgoritm:(NSString * _Nonnull)aDigestAlgoritm;
- (NSString * _Nonnull)getDigestAlgorithm SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI9Singleton")
@interface Singleton : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI9SubjectDN")
@interface SubjectDN : NSObject
@property (nonatomic, copy) NSString * _Nullable commonName;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable emaiAddress;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI5Utils")
@interface Utils : NSObject
- (NSString * _Nonnull)modelIdentifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI19VerificationManager")
@interface VerificationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 effective-4.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Darwin;
@import Foundation;
@import ObjectiveC;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CryptoAPI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum DeviceVersion : NSInteger;
enum DeviceSize : NSInteger;

SWIFT_CLASS("_TtC9CryptoAPI19ARCompactDeviceInfo")
@interface ARCompactDeviceInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ARCompactDeviceInfo * _Nonnull shared;)
+ (ARCompactDeviceInfo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull deviceNamesByCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)deviceSupportFaceID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deviceSupportTouchID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deviceSupportSecureEnclave SWIFT_WARN_UNUSED_RESULT;
- (enum DeviceVersion)deviceVersion SWIFT_WARN_UNUSED_RESULT;
- (enum DeviceSize)resolutionSize SWIFT_WARN_UNUSED_RESULT;
- (enum DeviceSize)deviceSize SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceSizeName:(enum DeviceSize)deviceSize SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceNameString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)deviceName:(enum DeviceVersion)deviceVersion SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isZoomed SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionEqualTo:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionGreaterThan:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionGreaterThanOrEqualTo:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionLessThan:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
- (BOOL)versionLessThanOrEqualTo:(NSString * _Nullable)version SWIFT_WARN_UNUSED_RESULT;
@end

@class KeyPairAttributes;
@class SubjectDN;

SWIFT_CLASS("_TtC9CryptoAPI18CertificateManager")
@interface CertificateManager : NSObject
@property (nonatomic) OSStatus signedResult;
+ (CertificateManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)setKeyPairAttributesWithAKeyAtt:(KeyPairAttributes * _Nonnull)aKeyAtt;
/// Create the CSR
- (NSString * _Nonnull)generateCertificateSigningRequestWithSubjectDN:(SubjectDN * _Nonnull)subjectDN publicKeyData:(NSData * _Nonnull)publicKeyData privateKey:(SecKeyRef _Nonnull)privateKey SWIFT_WARN_UNUSED_RESULT;
/// Create certificate from bytes
- (void)generateCertificateFromCertificateBytesWithCertificateData:(NSData * _Nonnull)certificateData;
/// Store certificate in key chain
- (void)storeCertificateWithCertificate:(SecCertificateRef _Nonnull)certificate certAlias:(NSString * _Nonnull)certAlias;
/// Get certificate from key chain
- (SecCertificateRef _Nonnull)getCertificateWithCertAlias:(NSString * _Nonnull)certAlias SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI25CertificateSigningRequest")
@interface CertificateSigningRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9CryptoAPI28CertificateSigningRequestRSA")
@interface CertificateSigningRequestRSA : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     This class exists due to the easy and intuitive way of using public keys generated outside iOS in
///   </li>
///   <li>
///     the Security framework and CommonCrypto tools (yes, I’m being sarcastic here).
///   </li>
///   <li>
///     CryptoCertificateImportManager is in charge of importing a certificate and obtaining a valid key
///   </li>
///   <li>
///     reference to use in any of SecKey operations (SecKeyEncrypt, SecKeyRawVerify…).
///   </li>
///   <li>
///     As far as I know, any other way of importing and using public keys from the outside is not
///   </li>
///   <li>
///     advised: https://devforums.apple.com/message/301532#301532
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9CryptoAPI25CryptoExportImportManager")
@interface CryptoExportImportManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DeviceSize, closed) {
  DeviceSizeUnknownSize = 0,
  DeviceSizeScreen3Dot5inch = 1,
  DeviceSizeScreen4inch = 2,
  DeviceSizeScreen4Dot7inch = 3,
  DeviceSizeScreen5Dot5inch = 4,
  DeviceSizeScreen5Dot8inch = 5,
  DeviceSizeScreen6Dot1inch = 6,
  DeviceSizeScreen6Dot5inch = 7,
};

typedef SWIFT_ENUM(NSInteger, DeviceVersion, closed) {
  DeviceVersionUnknownDevice = -111,
  DeviceVersionSimulator = 1,
  DeviceVersionIPhone4 = 3,
  DeviceVersionIPhone4S = 4,
  DeviceVersionIPhone5 = 5,
  DeviceVersionIPhone5C = 6,
  DeviceVersionIPhone5S = 7,
  DeviceVersionIPhone6 = 8,
  DeviceVersionIPhone6Plus = 9,
  DeviceVersionIPhone6S = 10,
  DeviceVersionIPhone6SPlus = 11,
  DeviceVersionIPhone7 = 12,
  DeviceVersionIPhone7Plus = 13,
  DeviceVersionIPhone8 = 14,
  DeviceVersionIPhone8Plus = 15,
  DeviceVersionIPhoneX = 16,
  DeviceVersionIPhoneSE = 17,
  DeviceVersionIPhoneXS = 18,
  DeviceVersionIPhoneXSMax = 19,
  DeviceVersionIPhoneXSMaxChina = 20,
  DeviceVersionIPhoneXR = 21,
  DeviceVersionIPhone11 = 22,
  DeviceVersionIPhone11Pro = 23,
  DeviceVersionIPhone11ProMax = 24,
  DeviceVersionIPad1 = 100,
  DeviceVersionIPad2 = 102,
  DeviceVersionIPadMini = 103,
  DeviceVersionIPad3 = 104,
  DeviceVersionIPad4 = 105,
  DeviceVersionIPadAir = 106,
  DeviceVersionIPadMini2 = 107,
  DeviceVersionIPadAir2 = 108,
  DeviceVersionIPadMini3 = 109,
  DeviceVersionIPadMini4 = 110,
  DeviceVersionIPadPro12Dot9Inch = 111,
  DeviceVersionIPadPro9Dot7Inch = 112,
  DeviceVersionIPad5 = 113,
  DeviceVersionIPadPro12Dot9Inch2Gen = 114,
  DeviceVersionIPadPro10Dot5Inch = 115,
  DeviceVersionIPadPro11Inch = 116,
  DeviceVersionIPadPro12Dot93rdGenInch = 117,
  DeviceVersionIPadMini5 = 118,
  DeviceVersionIPadAir3 = 119,
  DeviceVersionIPodTouch1Gen = 200,
  DeviceVersionIPodTouch2Gen = 201,
  DeviceVersionIPodTouch3Gen = 202,
  DeviceVersionIPodTouch4Gen = 203,
  DeviceVersionIPodTouch5Gen = 204,
  DeviceVersionIPodTouch6Gen = 205,
  DeviceVersionIPodTouch7Gen = 206,
};


SWIFT_CLASS("_TtC9CryptoAPI17KeyPairAttributes")
@interface KeyPairAttributes : NSObject
@property (nonatomic, copy) NSString * _Nullable keyLabel;
@property (nonatomic, copy) NSString * _Nullable keyType;
@property (nonatomic, copy) NSString * _Nullable keySize;
@property (nonatomic, copy) NSString * _Nullable keyAuthenticationType;
@property (nonatomic, copy) NSString * _Nullable keyStorageType;
@property (nonatomic, copy) NSString * _Nullable keyApplicationTag;
+ (NSString * _Nonnull)RSA SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)Hardware SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)Software SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)SoftwareLocalAuthentication SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)None SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_1024 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_2048 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_3072 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)RSA_4096 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC_256 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC_384 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC_521 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)DefualtAuthenticationType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)BiometricOnly SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)PasscodeOnly SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SignedResponse;

SWIFT_CLASS("_TtC9CryptoAPI14KeyPairManager")
@interface KeyPairManager : NSObject
@property (nonatomic) SecKeyRef _Nullable publicKey;
/// It generate the key pair
- (void)generateKeyPair:(KeyPairAttributes * _Nonnull)keypairAttributes completionHandler:(void (^ _Nonnull)(OSStatus))completionHandler;
/// Save Public key in key chain
- (void)savePublicKeyWithKeyTag:(NSString * _Nonnull)keyTag publicKey:(SecKeyRef _Nullable)publicKey;
/// Get Public key from key chain
- (NSData * _Nullable)getPublicKeyWithKeyTag:(NSString * _Nonnull)keyTag SWIFT_WARN_UNUSED_RESULT;
/// Privtae key reference also store in key chain as well as in Secure Enclave so that Private key reference can also be get from keychain
- (SignedResponse * _Nullable)getPrivateKeyWithKeyTag:(NSString * _Nonnull)keyTag prompotMessage:(NSString * _Nonnull)prompotMessage SWIFT_WARN_UNUSED_RESULT;
/// Delete key pair in key chain
- (void)deleteKeyPairWithKeyTag:(NSString * _Nonnull)keyTag keyType:(NSString * _Nonnull)keyType;
- (void)deletePublicKeyWithKeyTag:(NSString * _Nonnull)keyTag keyType:(NSString * _Nonnull)keyType;
- (void)deletePrivateKeyWithKeyTag:(NSString * _Nonnull)keyTag;
- (CFStringRef _Nonnull)getKeyType SWIFT_WARN_UNUSED_RESULT;
- (SecAccessControlCreateFlags)getAuthenticationTypeWithKeypairAttributes:(KeyPairAttributes * _Nonnull)keypairAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI14SignedResponse")
@interface SignedResponse : NSObject
- (NSData * _Nonnull)getSigendData SWIFT_WARN_UNUSED_RESULT;
- (OSStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (SecKeyRef _Nonnull)getSecKeyReference SWIFT_WARN_UNUSED_RESULT;
- (void)setSignedDataWithSData:(NSData * _Nonnull)sData;
- (void)setStatusWithS:(OSStatus)s;
- (void)setSecKeyReferenceWithSec:(SecKeyRef _Nonnull)sec;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SigningRequest;

SWIFT_CLASS("_TtC9CryptoAPI14SigningManager")
@interface SigningManager : NSObject
+ (SigningManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)initialize;
/// It generates the hash of of data
- (NSArray<NSNumber *> * _Nonnull)getHashWithHashAlgo:(NSString * _Nonnull)hashAlgo data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA1 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA1WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA256 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA256WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA384 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA384WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA512 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA512WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It signs data and return signature, data to be sign is always hash of actual data
- (SignedResponse * _Nonnull)signDataWithASigningRequest:(SigningRequest * _Nonnull)aSigningRequest SWIFT_WARN_UNUSED_RESULT;
- (SecPadding)getPaddingWithASigningRequest:(SigningRequest * _Nonnull)aSigningRequest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI14SigningRequest")
@interface SigningRequest : NSObject
- (SecKeyRef _Nonnull)getPrivateKey SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSNumber *> * _Nonnull)getDigest SWIFT_WARN_UNUSED_RESULT;
- (void)setPrivateKeyWithAPrivateKey:(SecKeyRef _Nonnull)aPrivateKey;
- (void)setDigestWithADigest:(NSArray<NSNumber *> * _Nonnull)aDigest;
- (NSString * _Nonnull)getKeyType SWIFT_WARN_UNUSED_RESULT;
- (void)setKeyTypeWithAKeyType:(NSString * _Nonnull)aKeyType;
- (void)setDigestAlgorithmWithADigestAlgoritm:(NSString * _Nonnull)aDigestAlgoritm;
- (NSString * _Nonnull)getDigestAlgorithm SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI9Singleton")
@interface Singleton : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI9SubjectDN")
@interface SubjectDN : NSObject
@property (nonatomic, copy) NSString * _Nullable commonName;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable emaiAddress;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI5Utils")
@interface Utils : NSObject
- (NSString * _Nonnull)modelIdentifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI19VerificationManager")
@interface VerificationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
